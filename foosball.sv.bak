module foosball #(
    parameter int div = 2,
    parameter int div_paddle = 415000,
    parameter int div_ball1 = 415000,
    parameter int div_ball2 = 370000,
    parameter int div_ball3 = 310000,
    parameter int div_ball4 = 250000,
    parameter int Ha = 96,
    parameter int Hb = 144,
    parameter int Hc = 784,
    parameter int Hd = 800,
    parameter int Va = 2,
    parameter int Vb = 35,
    parameter int Vc = 515,
    parameter int Vd = 525,
    parameter int paddlesizeH = 2,
    parameter int paddlesizeV = 30
) (
    input logic clk,
    input logic reset,
    output logic Hsync,
    output logic Vsync,
    input logic [3:0] direction_switch,
    input logic start_game,
    output logic [6:0] seg1,
    output logic [6:0] seg2,
    output logic bar,
    input logic [1:0] ball_speed,
    output logic [3:0] R,
    output logic [3:0] G,
    output logic [3:0] B
);

    logic pixel_clk, paddle_clk, ball_clk;
    logic [3:0] ball_clk_sel;
    logic Hactive, Vactive, dena;
    int score1, score2;

    // Instantiate div_gen for pixel clock
    div_gen #(.DIV(div)) pixel_clk_gen (
        .clk_in(clk),
        .reset(reset),
        .clk_out(pixel_clk)
    );

    // Instantiate sync_generator
    sync_generator sync_gen_inst (
        .pixel_clk(pixel_clk),
        .reset(reset),
        .Hsync(Hsync),
        .Vsync(Vsync),
        .Hactive(Hactive),
        .Vactive(Vactive),
        .dena(dena),
        // Pass through parameters
//        .Ha(Ha), .Hb(Hb), .Hc(Hc), .Hd(Hd),
//        .Va(Va), .Vb(Vb), .Vc(Vc), .Vd(Vd)
    );

    // Instantiate image_generator
    image_generator img_gen_inst (
        .pixel_clk(pixel_clk),
        .paddle_clk(paddle_clk),
        .ball_clk(ball_clk),
        .reset(reset),
        .Hactive(Hactive),
        .Vactive(Vactive),
        .Hsync(Hsync),
        .Vsync(Vsync),
        .dena(dena),
        .direction_switch(direction_switch),
        .start_game(start_game),
        .score1(score1),
        .score2(score2),
        .R(R),
        .G(G),
        .B(B),
        // Pass through parameters for size
       // .PVsize(paddlesizeV), .PHsize(paddlesizeH)
    );

    // Instantiate div_gen for paddle clock
    div_gen #(.DIV(div_paddle)) paddle_clk_gen (
        .clk_in(clk),
        .reset(reset),
        .clk_out(paddle_clk)
    );

//    // Selectable ball clock based on speed
//    always_comb begin
//        case (ball_speed)
//            2'b00: ball_clk_sel = div_ball1;
//            2'b01: ball_clk_sel = div_ball2;
//            2'b10: ball_clk_sel = div_ball3;
//            default: ball_clk_sel = div_ball4;
//        endcase
//    end
//
//    // Instantiate div_gen for ball clock with selectable divider
//    div_gen #(.DIV(ball_clk_sel)) ball_clk_gen (
//        .clk_in(clk),
//        .reset(reset),
//        .clk_out(ball_clk)
//    );



// Instantiate div_gen for each ball speed
div_gen #(.DIV(div_ball1)) ball_clk_gen1 (.clk_in(clk), .reset(reset), .clk_out(ball_clk1));
div_gen #(.DIV(div_ball2)) ball_clk_gen2 (.clk_in(clk), .reset(reset), .clk_out(ball_clk2));
div_gen #(.DIV(div_ball3)) ball_clk_gen3 (.clk_in(clk), .reset(reset), .clk_out(ball_clk3));
div_gen #(.DIV(div_ball4)) ball_clk_gen4 (.clk_in(clk), .reset(reset), .clk_out(ball_clk4));

// Logic to select among ball_clk{1,2,3,4} based on ball_speed
always_comb begin
    case(ball_speed)
        2'b00: ball_clk = ball_clk1;
        2'b01: ball_clk = ball_clk2;
        2'b10: ball_clk = ball_clk3;
        default: ball_clk = ball_clk4;
    endcase
end









    // Instantiate score_display
    score score_disp_inst (
        .score1(score1),
        .score2(score2),
        .seg1(seg1),
        .seg2(seg2),
        .bar(bar)
    );

endmodule

